# automatically generated by the FlatBuffers compiler, do not modify

# namespace: WebViewer

import flatbuffers

class Line(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsLine(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Line()
        x.Init(buf, n + offset)
        return x

    # Line
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Line
    def Point1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = o + self._tab.Pos
            from .Vec3 import Vec3
            obj = Vec3()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Line
    def Point2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = o + self._tab.Pos
            from .Vec3 import Vec3
            obj = Vec3()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Line
    def Color(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = o + self._tab.Pos
            from .Color import Color
            obj = Color()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Line
    def Comment(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def LineStart(builder): builder.StartObject(4)
def LineAddPoint1(builder, point1): builder.PrependStructSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(point1), 0)
def LineAddPoint2(builder, point2): builder.PrependStructSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(point2), 0)
def LineAddColor(builder, color): builder.PrependStructSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(color), 0)
def LineAddComment(builder, comment): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(comment), 0)
def LineEnd(builder): return builder.EndObject()
