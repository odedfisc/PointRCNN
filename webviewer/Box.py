# automatically generated by the FlatBuffers compiler, do not modify

# namespace: WebViewer

import flatbuffers

class Box(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsBox(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Box()
        x.Init(buf, n + offset)
        return x

    # Box
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Box
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Box
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Box
    def Pos(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = o + self._tab.Pos
            from .Vec3 import Vec3
            obj = Vec3()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Box
    def Size(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = o + self._tab.Pos
            from .Vec3 import Vec3
            obj = Vec3()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Box
    def Rotation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = o + self._tab.Pos
            from .Vec3 import Vec3
            obj = Vec3()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Box
    def Color(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = o + self._tab.Pos
            from .Color import Color
            obj = Color()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Box
    def Score(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Box
    def Comment(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def BoxStart(builder): builder.StartObject(8)
def BoxAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def BoxAddType(builder, type): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(type), 0)
def BoxAddPos(builder, pos): builder.PrependStructSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(pos), 0)
def BoxAddSize(builder, size): builder.PrependStructSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(size), 0)
def BoxAddRotation(builder, rotation): builder.PrependStructSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(rotation), 0)
def BoxAddColor(builder, color): builder.PrependStructSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(color), 0)
def BoxAddScore(builder, score): builder.PrependFloat32Slot(6, score, 0.0)
def BoxAddComment(builder, comment): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(comment), 0)
def BoxEnd(builder): return builder.EndObject()
